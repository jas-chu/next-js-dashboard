/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * ThinkEasy
 * Test Task BE
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  Auth,
  CreatePostInput,
  LoginInput,
  PostResponce,
  PostResponse,
  RefreshResponceModel,
  RefreshTokenInput,
  SignupInput
} from './thinkEasy.schemas'
import { customInstance } from '../mutator/custom-instance';
import type { ErrorType } from '../mutator/custom-instance';



/**
 * @summary Signup a new user
 */
export const authControllerSignup = (
    signupInput: SignupInput,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Auth>(
      {url: `/auth/signup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signupInput, signal
    },
      );
    }
  


export const getAuthControllerSignupMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerSignup>>, TError,{data: SignupInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerSignup>>, TError,{data: SignupInput}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerSignup>>, {data: SignupInput}> = (props) => {
          const {data} = props ?? {};

          return  authControllerSignup(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerSignupMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerSignup>>>
    export type AuthControllerSignupMutationBody = SignupInput
    export type AuthControllerSignupMutationError = ErrorType<unknown>

    /**
 * @summary Signup a new user
 */
export const useAuthControllerSignup = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerSignup>>, TError,{data: SignupInput}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerSignup>>,
        TError,
        {data: SignupInput},
        TContext
      > => {

      const mutationOptions = getAuthControllerSignupMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Login an existing user
 */
export const authControllerLogin = (
    loginInput: LoginInput,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Auth>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginInput, signal
    },
      );
    }
  


export const getAuthControllerLoginMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginInput}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogin>>, {data: LoginInput}> = (props) => {
          const {data} = props ?? {};

          return  authControllerLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
    export type AuthControllerLoginMutationBody = LoginInput
    export type AuthControllerLoginMutationError = ErrorType<unknown>

    /**
 * @summary Login an existing user
 */
export const useAuthControllerLogin = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginInput}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerLogin>>,
        TError,
        {data: LoginInput},
        TContext
      > => {

      const mutationOptions = getAuthControllerLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Refresh access token using a refresh token
 */
export const authControllerRefreshToken = (
    refreshTokenInput: RefreshTokenInput,
 signal?: AbortSignal
) => {
      
      
      return customInstance<RefreshResponceModel>(
      {url: `/auth/refresh-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenInput, signal
    },
      );
    }
  


export const getAuthControllerRefreshTokenMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRefreshToken>>, TError,{data: RefreshTokenInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerRefreshToken>>, TError,{data: RefreshTokenInput}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRefreshToken>>, {data: RefreshTokenInput}> = (props) => {
          const {data} = props ?? {};

          return  authControllerRefreshToken(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerRefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRefreshToken>>>
    export type AuthControllerRefreshTokenMutationBody = RefreshTokenInput
    export type AuthControllerRefreshTokenMutationError = ErrorType<unknown>

    /**
 * @summary Refresh access token using a refresh token
 */
export const useAuthControllerRefreshToken = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRefreshToken>>, TError,{data: RefreshTokenInput}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerRefreshToken>>,
        TError,
        {data: RefreshTokenInput},
        TContext
      > => {

      const mutationOptions = getAuthControllerRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Create a new post
 */
export const postsControllerCreate = (
    createPostInput: CreatePostInput,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PostResponce>(
      {url: `/posts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPostInput, signal
    },
      );
    }
  


export const getPostsControllerCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postsControllerCreate>>, TError,{data: CreatePostInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postsControllerCreate>>, TError,{data: CreatePostInput}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postsControllerCreate>>, {data: CreatePostInput}> = (props) => {
          const {data} = props ?? {};

          return  postsControllerCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof postsControllerCreate>>>
    export type PostsControllerCreateMutationBody = CreatePostInput
    export type PostsControllerCreateMutationError = ErrorType<unknown>

    /**
 * @summary Create a new post
 */
export const usePostsControllerCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postsControllerCreate>>, TError,{data: CreatePostInput}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postsControllerCreate>>,
        TError,
        {data: CreatePostInput},
        TContext
      > => {

      const mutationOptions = getPostsControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get all posts
 */
export const postsControllerGetAllPosts = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<PostResponse[]>(
      {url: `/posts`, method: 'GET', signal
    },
      );
    }
  

export const getPostsControllerGetAllPostsQueryKey = () => {
    return [`/posts`] as const;
    }

    
export const getPostsControllerGetAllPostsQueryOptions = <TData = Awaited<ReturnType<typeof postsControllerGetAllPosts>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetAllPosts>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostsControllerGetAllPostsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postsControllerGetAllPosts>>> = ({ signal }) => postsControllerGetAllPosts(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetAllPosts>>, TError, TData> & { queryKey: QueryKey }
}

export type PostsControllerGetAllPostsQueryResult = NonNullable<Awaited<ReturnType<typeof postsControllerGetAllPosts>>>
export type PostsControllerGetAllPostsQueryError = ErrorType<unknown>


/**
 * @summary Get all posts
 */

export function usePostsControllerGetAllPosts<TData = Awaited<ReturnType<typeof postsControllerGetAllPosts>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetAllPosts>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getPostsControllerGetAllPostsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all posts of a user
 */
export const postsControllerUserPosts = (
    userId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PostResponse[]>(
      {url: `/posts/user/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getPostsControllerUserPostsQueryKey = (userId: string,) => {
    return [`/posts/user/${userId}`] as const;
    }

    
export const getPostsControllerUserPostsQueryOptions = <TData = Awaited<ReturnType<typeof postsControllerUserPosts>>, TError = ErrorType<unknown>>(userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof postsControllerUserPosts>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostsControllerUserPostsQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postsControllerUserPosts>>> = ({ signal }) => postsControllerUserPosts(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof postsControllerUserPosts>>, TError, TData> & { queryKey: QueryKey }
}

export type PostsControllerUserPostsQueryResult = NonNullable<Awaited<ReturnType<typeof postsControllerUserPosts>>>
export type PostsControllerUserPostsQueryError = ErrorType<unknown>


/**
 * @summary Get all posts of a user
 */

export function usePostsControllerUserPosts<TData = Awaited<ReturnType<typeof postsControllerUserPosts>>, TError = ErrorType<unknown>>(
 userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof postsControllerUserPosts>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getPostsControllerUserPostsQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get a post by its ID
 */
export const postsControllerPost = (
    postId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PostResponse>(
      {url: `/posts/${postId}`, method: 'GET', signal
    },
      );
    }
  

export const getPostsControllerPostQueryKey = (postId: string,) => {
    return [`/posts/${postId}`] as const;
    }

    
export const getPostsControllerPostQueryOptions = <TData = Awaited<ReturnType<typeof postsControllerPost>>, TError = ErrorType<unknown>>(postId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof postsControllerPost>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPostsControllerPostQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof postsControllerPost>>> = ({ signal }) => postsControllerPost(postId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof postsControllerPost>>, TError, TData> & { queryKey: QueryKey }
}

export type PostsControllerPostQueryResult = NonNullable<Awaited<ReturnType<typeof postsControllerPost>>>
export type PostsControllerPostQueryError = ErrorType<unknown>


/**
 * @summary Get a post by its ID
 */

export function usePostsControllerPost<TData = Awaited<ReturnType<typeof postsControllerPost>>, TError = ErrorType<unknown>>(
 postId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof postsControllerPost>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getPostsControllerPostQueryOptions(postId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * ThinkEasy
 * Test Task BE
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  Auth,
  PostResponce,
  PostResponse,
  RefreshResponceModel
} from './thinkEasy.schemas'

export const getAuthControllerSignupResponseMock = (overrideResponse: Partial< Auth > = {}): Auth => ({accessToken: faker.string.alpha(20), refreshToken: faker.string.alpha(20), ...overrideResponse})

export const getAuthControllerLoginResponseMock = (overrideResponse: Partial< Auth > = {}): Auth => ({accessToken: faker.string.alpha(20), refreshToken: faker.string.alpha(20), ...overrideResponse})

export const getAuthControllerRefreshTokenResponseMock = (overrideResponse: Partial< RefreshResponceModel > = {}): RefreshResponceModel => ({access_token: faker.string.alpha(20), ...overrideResponse})

export const getPostsControllerCreateResponseMock = (overrideResponse: Partial< PostResponce > = {}): PostResponce => ({author: {}, content: {}, published: faker.datatype.boolean(), title: faker.string.alpha(20), ...overrideResponse})

export const getPostsControllerGetAllPostsResponseMock = (): PostResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({authorId: faker.string.alpha(20), content: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), published: faker.datatype.boolean(), title: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getPostsControllerUserPostsResponseMock = (): PostResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({authorId: faker.string.alpha(20), content: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), published: faker.datatype.boolean(), title: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getPostsControllerPostResponseMock = (overrideResponse: Partial< PostResponse > = {}): PostResponse => ({authorId: faker.string.alpha(20), content: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), published: faker.datatype.boolean(), title: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})


export const getAuthControllerSignupMockHandler = (overrideResponse?: Auth | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Auth> | Auth)) => {
  return http.post('*/auth/signup', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerSignupResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerLoginMockHandler = (overrideResponse?: Auth | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Auth> | Auth)) => {
  return http.post('*/auth/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerLoginResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAuthControllerRefreshTokenMockHandler = (overrideResponse?: RefreshResponceModel | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RefreshResponceModel> | RefreshResponceModel)) => {
  return http.post('*/auth/refresh-token', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAuthControllerRefreshTokenResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostsControllerCreateMockHandler = (overrideResponse?: PostResponce | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostResponce> | PostResponce)) => {
  return http.post('*/posts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostsControllerCreateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostsControllerGetAllPostsMockHandler = (overrideResponse?: PostResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PostResponse[]> | PostResponse[])) => {
  return http.get('*/posts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostsControllerGetAllPostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostsControllerUserPostsMockHandler = (overrideResponse?: PostResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PostResponse[]> | PostResponse[])) => {
  return http.get('*/posts/user/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostsControllerUserPostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostsControllerPostMockHandler = (overrideResponse?: PostResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PostResponse> | PostResponse)) => {
  return http.get('*/posts/:postId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostsControllerPostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getThinkEasyMock = () => [
  getAuthControllerSignupMockHandler(),
  getAuthControllerLoginMockHandler(),
  getAuthControllerRefreshTokenMockHandler(),
  getPostsControllerCreateMockHandler(),
  getPostsControllerGetAllPostsMockHandler(),
  getPostsControllerUserPostsMockHandler(),
  getPostsControllerPostMockHandler()
]
